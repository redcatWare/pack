#!/bin/bash

# Function to detect the Linux distribution
detect_distribution() {
    if [ -f /etc/os-release ]; then
        source /etc/os-release
        DISTRIBUTION=$ID
    elif [ -f /etc/lsb-release ]; then
        source /etc/lsb-release
        DISTRIBUTION=$DISTRIB_ID
    elif [ -f /etc/debian_version ]; then
        DISTRIBUTION="debian"
    else
        DISTRIBUTION="unknown"
    fi
}

# Function to install packages
install_package() {
    case "$PACKAGE_MANAGER" in
        "system")
            sudo nala install "$@"
            ;;
        "flatpak")
            flatpak install flathub "$@"
            ;;
        "aur")
            sudo pacstall -I "$@"
            ;;
        "brew")
            brew install "$@"
            ;;
        "nix")
            nix-env -i "$@"
            ;;
        "lure")
            lure in "$@"
            ;;
        "snap")
            sudo snap install "$@"
            ;;
        *)
            echo "Unsupported package manager."
            exit 1
            ;;
    esac
}

# Function to search packages
packmans=( "nala search" "pacstall -S" "brew search" "nix-env --query" "lure ls" "snap search" )

search_package() {
  program_name="$1"
  for manager_command in "${packmans[@]}"; do
    # Check if package manager exists (optional)
    if command -v "${manager_command%% *}" >/dev/null 2>&1; then
      # Remove the "search" part and combine with program name
      sudo ${manager_command%% *} "$program_name" 2>/dev/null
    fi
  done
}

# Function to remove packages
remove_package() {
    case "$PACKAGE_MANAGER" in
        "system")
            sudo nala remove "$@"
            ;;
        "aur")
            sudo pacstall -R "$@"
            ;;
        "flatpak")
            flatpak remove "$@"
            ;;
        "brew")
            brew uninstall "$@"
            ;;
        "nix")
            nix-env --uninstall "$@"
            ;;
        "lure")
            lure rm "$@"
            ;;
        "snap")
            sudo snap remove "$@"
            ;;
        *)
            echo "Unsupported package manager."
            exit 1
            ;;
    esac
}

# Function to autoremove and purge packages
autoremove_purge() {
    case "$PACKAGE_MANAGER" in
        "system")
            sudo nala autoremove
            ;;
        *)
            echo "This option is only supported for the system package manager."
            exit 1
            ;;
    esac
}

# Function to update package repositories
update_repos() {
    case "$PACKAGE_MANAGER" in
        "system")
            sudo nala update
            ;;
        "brew")
            brew update
            ;;
        "lure")
            lure ref
            ;;
        "snap")
            sudo snap refresh
            ;;
        "aur")
            sudo pacstall -U
            ;;
        *)
            echo "This option is only supported for the system package manager."
            exit 1
            ;;
    esac
}

# Function to upgrade packages
upgrade_packages() {
    case "$PACKAGE_MANAGER" in
        "system")
            sudo nala upgrade
            ;;
        "flatpak")
            flatpak update
            ;;
        "aur")
            sudo pacstall -Up
            ;;
        "brew")
            brew upgrade
            ;;
        "nix")
            nix-env --upgrade "$@"
            ;;
        "lure")
            lure up
            ;;
        *)
            echo "This option is only supported for supported package managers."
            exit 1
            ;;
    esac
}

# Function to display package manager version
show_version() {
    echo "redcatOS Package Manager Beta 0.1.1"
    echo "(c) redcatWare 2024"
}

# Main script

# Detect Linux distribution
detect_distribution

# Set package manager based on distribution
case "$DISTRIBUTION" in
    "ubuntu" | "debian" | "linuxmint" | "redcatos")
        PACKAGE_MANAGER="system"
        ;;
    "fedora" | "rocky" | "centos" | "almalinux")
        PACKAGE_MANAGER="fedora-system"
        ;;
    "endeavouros" | "manjaro" | "arch" | "artix")
        PACKAGE_MANAGER="arch-system"
        ;;
    *)
        echo "Unsupported distribution."
        exit 1
        ;;
esac

# Parse command-line options
while getopts "t:ripunv" option; do
    case "${option}" in
        t)
            PACKAGE_MANAGER="${OPTARG}"
            ;;
        -manager)
            PACKAGE_MANAGER="${OPTARG}"
            ;;
        r)
            remove_package "${@:OPTIND}"
            exit
            ;;
        -remove)
            remove_package "${@:OPTIND}"
            exit
            ;;
        i)
            install_package "${@:OPTIND}"
            exit
            ;;
        -install)
            install_package "${@:OPTIND}"
            exit
            ;;
        p)
            autoremove_purge
            exit
            ;;
        -purge)
            autoremove_purge
            exit
            ;;
        u)
            update_repos
            exit
            ;;
        -update)
            update_repos
            exit
            ;;
        n)
            upgrade_packages
            exit
            ;;
        -upgrade)
            upgrade_packages
            exit
            ;;
        v)
            show_version
            exit
            ;;
        -version)
            show_version
            exit
            ;;
        s)
            search_package
            exit
            ;;
        -search)
            search_package
            exit
            ;;
        *)
            echo "Usage: pack [-t/-manager <type>] [-r/-remove <package>] [-i/-install <package>] [-p/-purge] [-u/-update] [-n/-upgrade] [-v/-version]"
            exit 1
            ;;
    esac
done

echo "Usage: pack [-t/-manager <type>] [-r/-remove <package>] [-i/-install <package>] [-p/-purge] [-u/-update] [-n/-upgrade] [-v/-version]"
exit 1
